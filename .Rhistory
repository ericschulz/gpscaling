csv=rep(m[[i]]$sim, 200))
}
start<-length(m)-197
i<-start
dat<-data.frame(id=numeric(), n=numeric(), correct=numeric(), near=numeric(),
t=numeric(), l=numeric(), cond=numeric(), csv=numeric())
for (i in start:length(m)){
dat<-rbind(dat ,data.frame(id=rep(i, 200), n=m[[i]]$N, correct=m[[i]]$correctcollect,
near=m[[i]]$near, t=m[[i]]$timecollect, l=rep(m[[i]]$lambda, 200),
cond=ifelse(rep(i-start,200)<100, "uncued", "cued"),
csv=rep(m[[i]]$sim, 200)))
}
rep(m[[i]]$sim, 200)
#load in json file
m<-fromJSON('https://compositionalbandits.firebaseio.com/.json')
start<-length(m)-197
i<-start
dat<-data.frame(id=numeric(), n=numeric(), correct=numeric(), near=numeric(),
t=numeric(), l=numeric(), cond=numeric(), csv=numeric())
for (i in start:length(m)){
dat<-rbind(dat ,data.frame(id=rep(i, 200), n=m[[i]]$N, correct=m[[i]]$correctcollect,
near=m[[i]]$near, t=m[[i]]$timecollect, l=rep(m[[i]]$lambda, 200),
cond=ifelse(rep(i-start,200)<100, "uncued", "cued"),
csv=m[[i]]$sim))
}
getwd()
write.csv(dat, "/home/hanshalbe/Desktop/gpscaling/data/exp1data.csv")
setwd("/home/hanshalbe/Desktop/gpscaling")
dat<-read.csv("data/exp1data.csv")
dat<-subset(dat, t>=250 & t<=5000)
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
se<-function(x){sd(x)/sqrt(length(x))}
dp<-ddply(subset(dat,t>=250, t<=5000), ~cond, summarize, mu=mean(t, na.rm=TRUE), se=se(t))
pd <- position_dodge(.2)
dp<-ddply(dat, ~cond, summarize, mu=mean(t), se=1.96*se(t))
limits <- aes(ymax = mu + se, ymin=mu - se)
p1 <- ggplot(dp, aes(y=mu, x=cond, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#geom_point(mapping = aes(x = which, y = participants), position = 'dodge')+
#0 to 1
#golden ratio error bars
geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#title
theme_minimal() +xlab("Predictor")+ylab("Time in ms")+
#scale_y_continuous(limits = c(0,1.0), expand = c(0, 0)) +
ggtitle("(a) Reaction times")+
#adjust text size
theme(text = element_text(size=18,  family="sans"))+
theme(legend.position = "none")+xlab("Condition")
p1
dp<-ddply(dat, ~cond, summarize, mu=mean(correct), se=1.96*se(correct))
p2 <- ggplot(dp, aes(y=mu, x=cond, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#geom_point(mapping = aes(x = which, y = participants), position = 'dodge')+
#0 to 1
#golden ratio error bars
geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#title
theme_minimal() +xlab("Predictor")+ylab("P(correct)")+
#scale_y_continuous(limits = c(0,1.0), expand = c(0, 0)) +
ggtitle("(b) Accuracy")+
#adjust text size
theme(text = element_text(size=18,  family="sans"))+
theme(legend.position = "none")+xlab("Condition")
p2
dp$cond<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
p1 <- ggplot(dp, aes(y=mu, x=cond, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#geom_point(mapping = aes(x = which, y = participants), position = 'dodge')+
#0 to 1
#golden ratio error bars
geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#title
theme_minimal() +xlab("Predictor")+ylab("Time in ms")+
#scale_y_continuous(limits = c(0,1.0), expand = c(0, 0)) +
ggtitle("(a) Reaction times")+
#adjust text size
theme(text = element_text(size=18,  family="sans"))+
theme(legend.position = "none")+xlab("Condition")
p1
dp<-ddply(dat, ~cond, summarize, mu=mean(t), se=1.96*se(t))
limits <- aes(ymax = mu + se, ymin=mu - se)
dp$cond<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
p1 <- ggplot(dp, aes(y=mu, x=cond, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#geom_point(mapping = aes(x = which, y = participants), position = 'dodge')+
#0 to 1
#golden ratio error bars
geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#title
theme_minimal() +xlab("Predictor")+ylab("Time in ms")+
#scale_y_continuous(limits = c(0,1.0), expand = c(0, 0)) +
ggtitle("(a) Reaction times")+
#adjust text size
theme(text = element_text(size=18,  family="sans"))+
theme(legend.position = "none")+xlab("Condition")
p1
dp<-ddply(dat, ~cond, summarize, mu=mean(correct), se=1.96*se(correct))
dp$cond<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
p2 <- ggplot(dp, aes(y=mu, x=cond, fill=cond)) +
#bars
geom_bar(position="dodge", stat="identity")+
#geom_point(mapping = aes(x = which, y = participants), position = 'dodge')+
#0 to 1
#golden ratio error bars
geom_errorbar(limits, position="dodge", width=0.31)+
# #point size
# geom_point(size=3)+
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#title
theme_minimal() +xlab("Predictor")+ylab("P(correct)")+
#scale_y_continuous(limits = c(0,1.0), expand = c(0, 0)) +
ggtitle("(b) Accuracy")+
#adjust text size
theme(text = element_text(size=18,  family="sans"))+
theme(legend.position = "none")+xlab("Condition")
p2
se<-function(x){sd(x)/sqrt(length(x))}
dp<-ddply(dat, ~n+cond, summarize, mu=mean(t), se=se(t))
pd <- position_dodge(.2)
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
p3<-ggplot(dp, aes(x=n, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=1, position=pd) +
scale_color_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_line(position=pd, size=1.2) +
#classic theme, legend on bottom
theme_minimal()+
theme(text = element_text(size=18,  family="sans"))+
scale_x_continuous(breaks = round(seq(min(0), max(50), by = 10),1)) +
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size")
p3
p3<-ggplot(dp, aes(x=n, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=1, position=pd) +
scale_color_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_line(position=pd, size=1.2) +
#classic theme, legend on bottom
theme_minimal()+
theme(text = element_text(size=18,  family="sans"))+
scale_x_continuous(breaks = round(seq(min(0), max(50), by = 10),1)) +
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size and RT")
p3
dp<-ddply(dat, ~n+cond, summarize, mu=mean(correct), se=se(correct))
pd <- position_dodge(.2)
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
p4<-ggplot(dp, aes(x=n, y=mu, col=Condition)) +
geom_point(position =pd)+
#error bars
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0, size=1, position=pd) +
scale_color_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_line(position=pd, size=1.2) +
#classic theme, legend on bottom
theme_minimal()+
theme(text = element_text(size=18,  family="sans"))+
scale_x_continuous(breaks = round(seq(min(0), max(50), by = 10),1)) +
ylab("P(correct)")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size and Accuracy")
p4
dp<-ddply(dat, ~near+cond, summarize, mu=mean(t), se=se(t))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$near<-as.factor(dp$near)
p5<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size")
p5
p5<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(e) Nearby points and RT")
p5
dp<-ddply(dat, ~near+cond, summarize, mu=mean(t), se=se(t))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$near<-as.factor(dp$near)
p5<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Percentage of nearby points")+
theme(legend.position = "top")+
#change theme
ggtitle("(e) Nearby points and RT")
p5
dp<-ddply(dat, ~near+cond, summarize, mu=mean(correct), se=se(correct))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$near<-as.factor(dp$near)
p6<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size")
p6
dp<-ddply(dat, ~near+cond, summarize, mu=mean(correct), se=se(correct))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$near<-as.factor(dp$near)
p6<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(d) Nearby points and Accuracy")
p6
dp<-ddply(dat, ~l+cond, summarize, mu=mean(t), se=se(t))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$l<-as.factor(dp$l)
p7<-ggplot(dp, aes(x=l, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size")
p7
dp<-ddply(dat, ~l+cond, summarize, mu=mean(t), se=se(t))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$l<-as.factor(dp$l)
p7<-ggplot(dp, aes(x=l, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(g) Smoothness and RT")
p7
dp<-ddply(dat, ~l+cond, summarize, mu=mean(t), se=se(t))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$l<-as.factor(dp$l)
p7<-ggplot(dp, aes(x=l, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab(expression(lambda))+
theme(legend.position = "top")+
#change theme
ggtitle("(g) Smoothness and RT")
p7
dp<-ddply(dat, ~near+cond, summarize, mu=mean(correct), se=se(correct))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$near<-as.factor(dp$near)
p6<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("P(correct)")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(f) Nearby points and Accuracy")
p6
dp<-ddply(dat, ~l+cond, summarize, mu=mean(t), se=se(t))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$l<-as.factor(dp$l)
p7<-ggplot(dp, aes(x=l, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab(expression(lambda))+
theme(legend.position = "top")+
#change theme
ggtitle("(g) Smoothness and RT")
p7
dp<-ddply(dat, ~l+cond, summarize, mu=mean(correct), se=se(correct))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$l<-as.factor(dp$l)
p8<-ggplot(dp, aes(x=l, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("Time in ms")+xlab("Number of data points")+
theme(legend.position = "top")+
#change theme
ggtitle("(c) Sample size")
p8
dp<-ddply(dat, ~l+cond, summarize, mu=mean(correct), se=se(correct))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$l<-as.factor(dp$l)
p8<-ggplot(dp, aes(x=l, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("P(correct)")+xlab(expression(lambda))+
theme(legend.position = "top")+
#change theme
ggtitle("(h) Smoothness and Accuracy")
p8
library(gridExtra)
library(gridExtra)
grid.arrange(p1,p2,p3,p4,p5, p6,p7,p8, ncol=2)
library(gridExtra)
pdf("results.pdf", width=8, height=14)
grid.arrange(p1,p2,p3,p4,p5, p6,p7,p8, ncol=2)
dev.off()
pdf("results.pdf", width=12, height=18)
grid.arrange(p1,p2,p3,p4,p5, p6,p7,p8, ncol=2)
dev.off()
pdf("results.pdf", width=10, height=14)
grid.arrange(p1,p2,p3,p4,p5, p6,p7,p8, ncol=2)
dev.off()
dp<-ddply(dat, ~near+cond, summarize, mu=mean(correct), se=se(correct))
dp$Condition<-mapvalues(dp$cond, c("cued", "uncued"), c("Cued", "Uncued"))
pd <- position_dodge(0.9)
dp$near<-as.factor(dp$near)
p6<-ggplot(dp, aes(x=near, y=mu, fill=Condition)) +
#error bars
scale_fill_manual(values = c(cbPalette[c(7,6)]))+
#lines
geom_bar(stat="identity", position="dodge")+  #classic theme, legend on bottom
theme_minimal()+
geom_errorbar(aes(ymin=mu-1.96*se, ymax=mu+1.96*se), width=0.25, size=1, position=pd) +
theme(text = element_text(size=18,  family="sans"))+
ylab("P(correct)")+xlab("Percentage of nearby points")+
theme(legend.position = "top")+
#change theme
ggtitle("(f) Nearby points and Accuracy")
p6
library(gridExtra)
pdf("results.pdf", width=10, height=14)
grid.arrange(p1,p2,p3,p4,p5, p6,p7,p8, ncol=2)
dev.off()
dat<-read.csv("data/exp1data.csv")
dat
dat<-subset(dat, cond="uncued")
dat<-read.csv("data/exp1data.csv")
dat<-subset(dat, cond=="uncued")
d<-ddply(subset(dat,t>=250, t<=5000), ~near, summarize, m=mean(t, na.rm=TRUE))
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dat$l<-as.factor(dat$l)
#data frame with everything we need, i.e. min, max, lower nad upper quantile, median, CIs & mean
dp1<-ddply(subset(dat,t>=250, t<=5000), ~l, summarize,
d_ymin = max(min(t), quantile(t, 0.25) - 1.5 * IQR(t)),
d_ymax = min(max(t), quantile(t, 0.75) + 1.5 * IQR(t)),
d_lower = quantile(t, 0.25),  d_middle = median(t), d_upper = quantile(t, 0.75),
mu=mean(t))
########################################################
#Figure A: Error
########################################################
dat1<-ddply(subset(dat,t>=250, t<=5000), ~id+l, summarise, error=mean(t))
t.test(subset(dat1, l==2)$error, subset(dat1, l==5)$error)
p1<-ggplot(data = dp1) +
#boxplot with given values, we only need half of it
geom_boxplot(aes(x = as.numeric(l)-0.2, ymin = d_lower, ymax = d_upper, lower = d_lower,
middle = d_middle, upper = d_upper, width = 2 * 0.2, fill = l), stat = "identity") +
#jitter of raw data points, needs the full data frame
geom_jitter(data=dat1, aes(x = as.numeric(l) + 0.2,  y = error,  color = l),
width = 0.2 - 0.25 * 0.2, height = 0, size=1)+
#vertical segment
geom_segment(aes(x = as.numeric(l), y = d_ymin, xend = as.numeric(l), yend = d_ymax)) +
geom_point(aes(x = as.numeric(l)-0.2, y = mu), shape=23, size=3, fill="white", color="black") +
#top horizontal segment
geom_segment(aes(x = as.numeric(l) - 0.1,  y = d_ymax, xend = as.numeric(l),  yend = d_ymax)) +
#top vertical segment
geom_segment(aes(x = as.numeric(l) - 0.1, y = d_ymin, xend = as.numeric(l), yend = d_ymin)) +
#theme minimal
theme_minimal()+
#sans
theme(text = element_text(size=18,  family="sans"))+
#colors and fill
scale_fill_manual(values = c(cbPalette[c(7,6)], "grey40"))+
scale_color_manual(values = c(cbPalette[c(7,6)], "grey40"))+
#labs
xlab(expression(lambda))+ylab("Time in ms")+
#no legend
theme(legend.position="none", strip.background=element_blank(), legend.key=element_rect(color=NA))+
#labe x-axis
scale_x_continuous(breaks = c(1,2),labels = c("2","5"))+ggtitle("(a) Smoothness")
p1
dat<-subset(dat, t>=250 & t<=5000)
d<-ddply(subset(dat,t>=250, t<=5000), ~near, summarize, m=mean(t, na.rm=TRUE))
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dat$l<-as.factor(dat$l)
#data frame with everything we need, i.e. min, max, lower nad upper quantile, median, CIs & mean
dp1<-ddply(subset(dat,t>=250, t<=5000), ~l, summarize,
d_ymin = max(min(t), quantile(t, 0.25) - 1.5 * IQR(t)),
d_ymax = min(max(t), quantile(t, 0.75) + 1.5 * IQR(t)),
d_lower = quantile(t, 0.25),  d_middle = median(t), d_upper = quantile(t, 0.75),
mu=mean(t))
########################################################
#Figure A: Error
########################################################
dat1<-ddply(subset(dat,t>=250, t<=5000), ~id+l, summarise, error=mean(t))
t.test(subset(dat1, l==2)$error, subset(dat1, l==5)$error)
p1<-ggplot(data = dp1) +
#boxplot with given values, we only need half of it
geom_boxplot(aes(x = as.numeric(l)-0.2, ymin = d_lower, ymax = d_upper, lower = d_lower,
middle = d_middle, upper = d_upper, width = 2 * 0.2, fill = l), stat = "identity") +
#jitter of raw data points, needs the full data frame
geom_jitter(data=dat1, aes(x = as.numeric(l) + 0.2,  y = error,  color = l),
width = 0.2 - 0.25 * 0.2, height = 0, size=1)+
#vertical segment
geom_segment(aes(x = as.numeric(l), y = d_ymin, xend = as.numeric(l), yend = d_ymax)) +
geom_point(aes(x = as.numeric(l)-0.2, y = mu), shape=23, size=3, fill="white", color="black") +
#top horizontal segment
geom_segment(aes(x = as.numeric(l) - 0.1,  y = d_ymax, xend = as.numeric(l),  yend = d_ymax)) +
#top vertical segment
geom_segment(aes(x = as.numeric(l) - 0.1, y = d_ymin, xend = as.numeric(l), yend = d_ymin)) +
#theme minimal
theme_minimal()+
#sans
theme(text = element_text(size=18,  family="sans"))+
#colors and fill
scale_fill_manual(values = c(cbPalette[c(7,6)], "grey40"))+
scale_color_manual(values = c(cbPalette[c(7,6)], "grey40"))+
#labs
xlab(expression(lambda))+ylab("Time in ms")+
#no legend
theme(legend.position="none", strip.background=element_blank(), legend.key=element_rect(color=NA))+
#labe x-axis
scale_x_continuous(breaks = c(1,2),labels = c("2","5"))+ggtitle("(a) Smoothness")
p1
